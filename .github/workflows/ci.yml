name: CI
on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        platform: [ ubuntu-latest, macOS-latest, windows-latest ]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.100'
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - name: Install Python (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - run: python --version
      - name: Test (Unix)
        run: dotnet msbuild "tests/Thoth.Json.Tests.JavaScript" /restore /t:ResolveAssemblyReferencesDesignTime,ResolveProjectReferencesDesignTime,ResolvePackageDependenciesDesignTime,FindReferenceAssembliesForReferences,_GenerateCompileDependencyCache,_ComputeNonExistentFileProperty,BeforeBuild,BeforeCompile,CoreCompile /p:Fable=True /p:Configuration=Release /p:TargetFramework=net8.0 /p:DesignTimeBuild=True /p:SkipCompilerExecution=True /p:ProvideCommandLineArgs=True /p:RestoreUseStaticGraphEvaluation=False /p:RestoreLockedMode=false /p:RestorePackagesWithLockFile=false  /p:NuGetLockFilePath=Fable.lock /p:NonExistentFile="__NonExistentSubDir__/__NonExistentFile__" --getItem:FscCommandLineArgs --getItem:ProjectReference --getProperty:OutputType -warnAsMessage:NU1608
      #   if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macOS-latest'
      #   run: ./build.sh test
      # - name: Test (Windows)
      #   if: matrix.platform == 'windows-latest'
      #   run: .\build.bat test
